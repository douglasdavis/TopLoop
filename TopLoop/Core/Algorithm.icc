/// Inline functions for TL::Algorithm

inline void TL::Algorithm::setIsData() {
  m_isMC = false;
}

inline void TL::Algorithm::setIsSystematic() {
  m_isNominal = false;
}

inline std::shared_ptr<TL::FileManager> TL::Algorithm::fileManager() const {
  return m_fm;
}

inline std::shared_ptr<TTreeReader> TL::Algorithm::reader() const {
  return m_reader;
}

inline std::shared_ptr<TTreeReader> TL::Algorithm::weightsReader() const {
  return m_weightsReader;
}

inline void TL::Algorithm::setFileManager(std::shared_ptr<TL::FileManager> fm) {
  m_fm = fm;
  m_totalEntries = m_fm->rootChain()->GetEntries();
}

template<typename T>
inline std::unique_ptr<T>
TL::Algorithm::setupBranch(std::shared_ptr<TTreeReader> reader, const char* name, const char* tree_name) {
  if ( !(ignoreList().empty()) && std::find(ignoreList().begin(),ignoreList().end(),name) != ignoreList().end() ) {
    return nullptr;
  }
  if ( reader->GetTree() == nullptr ) {
    logger()->debug("{} branch trying to link to a null tree! tree name: {}", name, tree_name);
    return nullptr;
  }
  if ( reader->GetTree()->GetListOfBranches()->FindObject(name) != nullptr ) {
    return std::make_unique<T>(*reader,name);
  }
  else {
    logger()->debug("{} branch not found in the tree! use will crash!", name);
    return nullptr;
  }
}

inline bool TL::Algorithm::isMC() const {
  return m_isMC;
}

inline bool TL::Algorithm::isData() const {
  return !m_isMC;
}

inline bool TL::Algorithm::isNominal() const {
  return m_isNominal;
}

inline bool TL::Algorithm::isSystematic() const {
  return !m_isNominal;
}
